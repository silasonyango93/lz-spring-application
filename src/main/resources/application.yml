spring:

  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB




  datasource:
    #url: jdbc:h2:mem:test_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    url: jdbc:mysql://mysql-db/livelihoodzones?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false
    #url: jdbc:mysql://localhost:3306/livelihoodzones?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false
    username: sevenskies
    password: sevenskies
    #username: silas
    #password: 8032
#  tomcat:
#    max-wait: 20000
#    max-active: 50
#    max-idle: 20
#    min-idle: 15

  logging:
    level:
      root=DEBUG:

  jpa:
    show-sql: false
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
    properties:
      hibernate:
        #dialect: org.hibernate.dialect.H2Dialect
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
        id:
          new_generator_mappings: false


server:
   port: 8080 # This is the default port anyway, but you can change it here

security:
  jwt:
    token:
      secret-key: secret-key
      expire-length: 300000000000 # 5 minutes duration by default: 5 minutes * 60 seconds * 1000 miliseconds




UserController:
  signin: Authenticates user and returns its JWT token.
  signup: Creates user and returns its JWT token
  delete: Deletes specific user by username
  search: Returns specific user by username
  me: Returns current user's data
  all-users: Returns all registered users
  all-roles: Returns all roles in the system
  new-roles: assigns new roles
  user-request-by-email: Fetch a user details by email
  update-user-details: Updates a user details
  change-user-password: Changes a user password


CountiesController:
  all-counties: Returns all registered counties in the system

LivelihoodZonesController:
  all-livelihoodzones: Returns all registered livelihoodzones in the system
  a-county-livelihoodzones: Returns all livelihood zones in the specified county
  update-county-livelihoodzones: Adds or removes a livelihood zone assignment from a county
  assign-a-sublocation-a-livelihoodzone: Assign a sub-location to a livelihood zone

QuestionnaireResponsesController:
  wealthgroup: Accepts the responses of a wealth group questionnaire
  zone-level: Accepts the responses of a Zonal level questionnaire
  retrieve-wealthgroup: Retrieves all user responses for a particular wealth group questionnaire when provided the questionnaire unique id
  retrieve-zone-level: Retrieves all user responses for a particular zone-level questionnaire when provided the questionnaire unique id
  all-zone-level-questionnaire-sessions: Retrieves all zone-level questionnaire sessions and the questionnaire unique ids
  all-wealth-group-questionnaire-sessions: Retrieves all wealth group questionnaire sessions and the questionnaire unique ids


WealthGroupReports:
  wealthgroup-distribution: Returns data on how the wealth groups are distributed in a particular county and zone
  wealthgroup-aggregate-responses: Returns wealth group aggregate responses for all questionnaires within a county
  wealth-group-questionnaire-types: Returns the types of wealth group questionnaires

ZoneLevelReports:
  zone-level-report: A report on zone level questionnaire responses

org:
  hibernate:
    ConnectionReleaseMode: ON_CLOSE